{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOEzaV4oZVBoFmVG41kpvrD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**Python Set**"],"metadata":{"id":"gkOryU0FzZhd"}},{"cell_type":"markdown","source":["# There are four collection data types in the Python programming language:\n","•\tList is a collection which is ordered and changeable. Allows duplicate members.\n","\n","•\tTuple is a collection which is ordered and unchangeable. Allows duplicate members.\n","\n","•\tSet is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.\n","\n","•\tDictionary is a collection which is ordered** and changeable. No duplicate members.\n","\n"],"metadata":{"id":"9xxcqh5ezeiy"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W6LXMWtszHWx","executionInfo":{"status":"ok","timestamp":1719108686283,"user_tz":-360,"elapsed":19,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"d04667ce-79f3-422d-c395-4395fada9e7e"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple', 'cherry', 'banana'}\n"]}],"source":["# Q:Duplicate values will be ignored:\n","thisset = {\"apple\", \"banana\", \"cherry\", \"apple\"}\n","print(thisset)"]},{"cell_type":"code","source":["# Q:True and 1 is considered the same value:\n","thisset = {\"apple\", \"banana\", \"cherry\", True, 1, 2}\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bwn5SWMV3Ih6","executionInfo":{"status":"ok","timestamp":1719108870202,"user_tz":-360,"elapsed":450,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"313964dd-861d-4da6-fdcd-ad712a9191ec"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["{True, 2, 'apple', 'cherry', 'banana'}\n"]}]},{"cell_type":"code","source":["# Q:False and 0 is considered the same value:\n","thisset = {\"apple\", \"banana\", \"cherry\", False, True, 0}\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dQLjfTXa35vJ","executionInfo":{"status":"ok","timestamp":1719108909065,"user_tz":-360,"elapsed":449,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"349c0728-907f-4a23-b0fd-5036ec62e402"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["{False, True, 'apple', 'cherry', 'banana'}\n"]}]},{"cell_type":"code","source":["# Q:Using the set() constructor to make a set:\n","thisset = set((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fFrPct-g4DOE","executionInfo":{"status":"ok","timestamp":1719109009605,"user_tz":-360,"elapsed":469,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"05a82ec3-b593-43e5-d7e8-4cc950a5de9e"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple', 'cherry', 'banana'}\n"]}]},{"cell_type":"markdown","source":["#*A. Add Set Items*"],"metadata":{"id":"p5DUQPkE4nJD"}},{"cell_type":"code","source":["# Q:Add an item to a set, using the add() method:\n","thisset = {\"apple\", \"banana\", \"cherry\"}\n","thisset.add(\"orange\")\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z2xBQB9r4bw_","executionInfo":{"status":"ok","timestamp":1719109082000,"user_tz":-360,"elapsed":457,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"ac6a52d3-4db3-47f3-b356-a5a00708dadf"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple', 'cherry', 'banana', 'orange'}\n"]}]},{"cell_type":"code","source":["# Q:Add elements from tropical into thisset using update() Method:\n","thisset = {\"apple\", \"banana\", \"cherry\"}\n","tropical = {\"pineapple\", \"mango\", \"papaya\"}\n","thisset.update(tropical)\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gHvscPyL4tcj","executionInfo":{"status":"ok","timestamp":1719109216684,"user_tz":-360,"elapsed":439,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"2c8b504a-0def-4fe3-9760-f30ea617c25d"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["{'pineapple', 'papaya', 'apple', 'cherry', 'banana', 'mango'}\n"]}]},{"cell_type":"code","source":["# Q:Add elements of a list to at set:\n","thisset = {\"apple\", \"banana\", \"cherry\"}\n","mylist = [\"kiwi\", \"orange\"]\n","thisset.update(mylist)\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ktwo4V5u5OVO","executionInfo":{"status":"ok","timestamp":1719109297937,"user_tz":-360,"elapsed":456,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"b9ec5647-3b4c-4796-efd2-48448c17005f"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple', 'banana', 'cherry', 'orange', 'kiwi'}\n"]}]},{"cell_type":"markdown","source":["#*B. Remove Item*"],"metadata":{"id":"TJ4EZaLN5otb"}},{"cell_type":"code","source":["# Q:Remove \"banana\" by using the remove() method:\n","thisset = {\"apple\", \"banana\", \"cherry\"}\n","thisset.remove(\"banana\")\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WY0HbIjy5iK3","executionInfo":{"status":"ok","timestamp":1719109349212,"user_tz":-360,"elapsed":599,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"7e396625-9788-415a-a4d7-e04e76ceb0f5"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple', 'cherry'}\n"]}]},{"cell_type":"code","source":["# Q:Remove \"banana\" by using the discard() method:\n","thisset = {\"apple\", \"banana\", \"cherry\"}\n","thisset.discard(\"banana\")\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lVJAqr7o5upM","executionInfo":{"status":"ok","timestamp":1719109390243,"user_tz":-360,"elapsed":444,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"0fc0cd77-aed0-4dc9-c392-8988bb98a01f"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple', 'cherry'}\n"]}]},{"cell_type":"code","source":["# Q:Remove a random item by using the pop() method:\n","thisset = {\"apple\", \"banana\", \"cherry\"}\n","x = thisset.pop()\n","print(x)\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bc7yFocZ54sl","executionInfo":{"status":"ok","timestamp":1719109434633,"user_tz":-360,"elapsed":444,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"ac1a33c0-f242-4761-a878-76e31babd45d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["apple\n","{'cherry', 'banana'}\n"]}]},{"cell_type":"code","source":["# Q:The clear() method empties the set:\n","thisset = {\"apple\", \"banana\", \"cherry\"}\n","thisset.clear()\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xbAtmhrT6Dij","executionInfo":{"status":"ok","timestamp":1719109476485,"user_tz":-360,"elapsed":438,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"6c1851d6-6fab-4eae-ba6c-91bca22a4360"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["set()\n"]}]},{"cell_type":"code","source":["# Q:The del keyword will delete the set completely:\n","thisset = {\"apple\", \"banana\", \"cherry\"}\n","del thisset\n","print(thisset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":176},"id":"Mvm-aiij6Nwc","executionInfo":{"status":"error","timestamp":1719109503414,"user_tz":-360,"elapsed":444,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"adbc28fa-c277-4cad-e3a4-d0e8416599b0"},"execution_count":12,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'thisset' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-af58257b2652>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mthisset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"apple\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"banana\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"cherry\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mdel\u001b[0m \u001b[0mthisset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthisset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'thisset' is not defined"]}]},{"cell_type":"markdown","source":["#C. Join Sets\n","\n","There are several ways to join two or more sets in Python.\n","\n","The union() and update() methods joins all items from both sets.\n","\n","The intersection() method keeps ONLY the duplicates.\n","\n","The difference() method keeps the items from the first set that are not in the other set(s).\n","\n","The symmetric_difference() method keeps all items EXCEPT the duplicates.\n"],"metadata":{"id":"EPDabWhq6dB-"}},{"cell_type":"code","source":["# Q:Join set1 and set2 into a new set using union() method:\n","set1 = {\"a\", \"b\", \"c\"}\n","set2 = {1, 2, 3}\n","set3 = set1.union(set2)\n","print(set3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MpUR-8gT6UVD","executionInfo":{"status":"ok","timestamp":1719109916957,"user_tz":-360,"elapsed":438,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"19bf42dc-3b9d-4649-bf85-7383e48f6c95"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3, 'a', 'b', 'c'}\n"]}]},{"cell_type":"code","source":["# Q:Use | to join two sets using OR operator:\n","set1 = {\"a\", \"b\", \"c\"}\n","set2 = {1, 2, 3}\n","set3 = set1 | set2\n","print(set3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PfN2vwU_75TW","executionInfo":{"status":"ok","timestamp":1719109946298,"user_tz":-360,"elapsed":477,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"bd9340b8-fa4f-479a-e6df-24bd3808d2ef"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3, 'a', 'b', 'c'}\n"]}]},{"cell_type":"code","source":["# Q:Join multiple sets with the union() method:\n","set1 = {\"a\", \"b\", \"c\"}\n","set2 = {1, 2, 3}\n","set3 = {\"John\", \"Elena\"}\n","set4 = {\"apple\", \"bananas\", \"cherry\"}\n","myset = set1.union(set2, set3, set4)\n","print(myset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0OxLqRnv8AdJ","executionInfo":{"status":"ok","timestamp":1719110231024,"user_tz":-360,"elapsed":438,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"1692e860-6e56-4432-9a0f-25e7c9ec1367"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3, 'a', 'b', 'apple', 'John', 'bananas', 'cherry', 'c', 'Elena'}\n"]}]},{"cell_type":"code","source":["# Q:Use | to join multiple sets using OR operator:\n","set1 = {\"a\", \"b\", \"c\"}\n","set2 = {1, 2, 3}\n","set3 = {\"John\", \"Elena\"}\n","set4 = {\"apple\", \"bananas\", \"cherry\"}\n","myset = set1 | set2 | set3 |set4\n","print(myset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wpNM6PnD9F-U","executionInfo":{"status":"ok","timestamp":1719110295624,"user_tz":-360,"elapsed":435,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"bfbd292f-2393-4d7b-f753-58285b692f7b"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3, 'a', 'b', 'apple', 'John', 'bananas', 'cherry', 'c', 'Elena'}\n"]}]},{"cell_type":"code","source":["# Q:Join a set with a tuple:\n","x = {\"a\", \"b\", \"c\"}\n","y = (1, 2, 3)\n","z = x.union(y)\n","print(z)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ZnhzGCl9Vv1","executionInfo":{"status":"ok","timestamp":1719110336758,"user_tz":-360,"elapsed":421,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"c4819f5a-fffb-4bef-8c99-9df1a82dfa3b"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3, 'a', 'b', 'c'}\n"]}]},{"cell_type":"code","source":["# Q:The update() method inserts the items in set2 into set1:\n","set1 = {\"a\", \"b\" , \"c\"}\n","set2 = {1, 2, 3}\n","set1.update(set2)\n","print(set1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eEd35fTt9fwi","executionInfo":{"status":"ok","timestamp":1719110396288,"user_tz":-360,"elapsed":464,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"77e3d2f3-79fb-4af2-9eaf-e1ca1e1f131d"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3, 'a', 'b', 'c'}\n"]}]},{"cell_type":"code","source":["# Q:Join set1 and set2, but keep only the duplicates:\n","set1 = {\"apple\", \"banana\", \"cherry\"}\n","set2 = {\"google\", \"microsoft\", \"apple\"}\n","set3 = set1.intersection(set2)\n","print(set3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gdi2mjMU9uUB","executionInfo":{"status":"ok","timestamp":1719110437988,"user_tz":-360,"elapsed":469,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"a61dc654-6237-4c10-ce20-8bd0e89e4ad0"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple'}\n"]}]},{"cell_type":"code","source":["# Q:Use & to join two sets but keep only the duplicates:\n","set1 = {\"apple\", \"banana\", \"cherry\"}\n","set2 = {\"google\", \"microsoft\", \"apple\"}\n","set3 = set1 & set2\n","print(set3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q4lfJShe94fq","executionInfo":{"status":"ok","timestamp":1719110475308,"user_tz":-360,"elapsed":437,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"0af865da-fcf3-42c3-f2e5-56412c891a82"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple'}\n"]}]},{"cell_type":"code","source":["# Q:Keep the items that exist in both set1, and set2 using intersection_update() method:\n","set1 = {\"apple\", \"banana\", \"cherry\"}\n","set2 = {\"google\", \"microsoft\", \"apple\"}\n","set1.intersection_update(set2)\n","print(set1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ikr5EH8C-Bnc","executionInfo":{"status":"ok","timestamp":1719110584148,"user_tz":-360,"elapsed":456,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"5a5622e0-38cb-4fbe-ff6f-32a7676666b5"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple'}\n"]}]},{"cell_type":"code","source":["# Q:Join sets that contains the values True, False, 1, and 0, and see what is considered as duplicates:\n","set1 = {\"apple\", 1,  \"banana\", 0, \"cherry\"}\n","set2 = {False, \"google\", 1, \"apple\", 2, True}\n","set3 = set1.intersection(set2)\n","print(set3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"272Xk038-cLn","executionInfo":{"status":"ok","timestamp":1719110672005,"user_tz":-360,"elapsed":462,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"69973a78-b2ca-4757-f5db-f4a7c86767e3"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["{False, 1, 'apple'}\n"]}]},{"cell_type":"code","source":["# Q: Keep all items from set1 that are not in set2 using difference() method:\n","set1 = {\"apple\", \"banana\", \"cherry\"}\n","set2 = {\"google\", \"microsoft\", \"apple\"}\n","set3 = set1.difference(set2)\n","print(set3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ip6XR2jU-xoL","executionInfo":{"status":"ok","timestamp":1719110768795,"user_tz":-360,"elapsed":444,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"66ae128e-5f61-4d41-f54a-a741cceb6808"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["{'cherry', 'banana'}\n"]}]},{"cell_type":"code","source":["# Q:Use - to join two sets:\n","set1 = {\"apple\", \"banana\", \"cherry\"}\n","set2 = {\"google\", \"microsoft\", \"apple\"}\n","set3 = set1 - set2\n","print(set3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J23m5Siu_JQ9","executionInfo":{"status":"ok","timestamp":1719110834405,"user_tz":-360,"elapsed":446,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"6a81a411-69ee-47e3-ca0d-25e220653596"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["{'cherry', 'banana'}\n"]}]},{"cell_type":"code","source":["# Q:Use the difference_update() method to keep the first set items that are not present in both sets: ********************\n","set1 = {\"apple\", \"banana\", \"cherry\"}\n","set2 = {\"google\", \"microsoft\", \"apple\"}\n","set1.difference_update(set2)\n","print(set1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0l8c1RUD_ZSF","executionInfo":{"status":"ok","timestamp":1719110910620,"user_tz":-360,"elapsed":504,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"a726398e-3385-40b1-f58f-d85633705f6b"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["{'cherry', 'banana'}\n"]}]},{"cell_type":"code","source":["# Q:Keep the items that are not present in both sets:\n","set1 = {\"apple\", \"banana\", \"cherry\"}\n","set2 = {\"google\", \"microsoft\", \"apple\"}\n","set3 = set1.symmetric_difference(set2)\n","print(set3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sI3vL8b6_r4Q","executionInfo":{"status":"ok","timestamp":1719111069536,"user_tz":-360,"elapsed":449,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"8de92e3c-d6c7-42ba-9a60-45032b69b8bb"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["{'google', 'banana', 'cherry', 'microsoft'}\n"]}]},{"cell_type":"code","source":["# Q:Use ^ (XOR Operator) to join two sets Keep the items that are not present in both sets:\n","set1 = {\"apple\", \"banana\", \"cherry\"}\n","set2 = {\"google\", \"microsoft\", \"apple\"}\n","set3 = set1 ^ set2\n","print(set3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bCxUq80HASr4","executionInfo":{"status":"ok","timestamp":1719111110835,"user_tz":-360,"elapsed":461,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"ef1e228a-3ed1-40a1-f3f6-cda1d748877a"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["{'google', 'banana', 'cherry', 'microsoft'}\n"]}]},{"cell_type":"code","source":["# Q:Use the symmetric_difference_update() method to keep the items that are not present in both sets:\n","set1 = {\"apple\", \"banana\", \"cherry\"}\n","set2 = {\"google\", \"microsoft\", \"apple\"}\n","set1.symmetric_difference_update(set2)\n","print(set1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yAtDHxYJAcxR","executionInfo":{"status":"ok","timestamp":1719111237985,"user_tz":-360,"elapsed":453,"user":{"displayName":"Aupu_AI","userId":"12893461163900296745"}},"outputId":"bb8e1a43-b95d-462b-aed8-5343dca18975"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["{'google', 'banana', 'cherry', 'microsoft'}\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Ij1qGBANA7zw"},"execution_count":null,"outputs":[]}]}